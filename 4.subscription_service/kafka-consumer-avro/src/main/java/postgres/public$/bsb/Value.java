/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package postgres.public$.bsb;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Value extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6135694624946864469L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Value\",\"namespace\":\"postgres.public.bsb\",\"fields\":[{\"name\":\"bsb\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fi_code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"financial_institution\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"bsb_address\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"suburb\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"address_state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"post_code\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"payment_systems\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}],\"connect.name\":\"postgres.public.bsb.Value\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Value> ENCODER =
      new BinaryMessageEncoder<Value>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Value> DECODER =
      new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Value> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Value> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Value> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Value>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Value to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Value from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Value instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Value fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String bsb;
  @Deprecated public java.lang.String fi_code;
  @Deprecated public java.lang.String financial_institution;
  @Deprecated public java.lang.String bsb_address;
  @Deprecated public java.lang.String suburb;
  @Deprecated public java.lang.String address_state;
  @Deprecated public java.lang.String post_code;
  @Deprecated public java.lang.String payment_systems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Value() {}

  /**
   * All-args constructor.
   * @param bsb The new value for bsb
   * @param fi_code The new value for fi_code
   * @param financial_institution The new value for financial_institution
   * @param bsb_address The new value for bsb_address
   * @param suburb The new value for suburb
   * @param address_state The new value for address_state
   * @param post_code The new value for post_code
   * @param payment_systems The new value for payment_systems
   */
  public Value(java.lang.String bsb, java.lang.String fi_code, java.lang.String financial_institution, java.lang.String bsb_address, java.lang.String suburb, java.lang.String address_state, java.lang.String post_code, java.lang.String payment_systems) {
    this.bsb = bsb;
    this.fi_code = fi_code;
    this.financial_institution = financial_institution;
    this.bsb_address = bsb_address;
    this.suburb = suburb;
    this.address_state = address_state;
    this.post_code = post_code;
    this.payment_systems = payment_systems;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bsb;
    case 1: return fi_code;
    case 2: return financial_institution;
    case 3: return bsb_address;
    case 4: return suburb;
    case 5: return address_state;
    case 6: return post_code;
    case 7: return payment_systems;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bsb = value$ != null ? value$.toString() : null; break;
    case 1: fi_code = value$ != null ? value$.toString() : null; break;
    case 2: financial_institution = value$ != null ? value$.toString() : null; break;
    case 3: bsb_address = value$ != null ? value$.toString() : null; break;
    case 4: suburb = value$ != null ? value$.toString() : null; break;
    case 5: address_state = value$ != null ? value$.toString() : null; break;
    case 6: post_code = value$ != null ? value$.toString() : null; break;
    case 7: payment_systems = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bsb' field.
   * @return The value of the 'bsb' field.
   */
  public java.lang.String getBsb() {
    return bsb;
  }


  /**
   * Sets the value of the 'bsb' field.
   * @param value the value to set.
   */
  public void setBsb(java.lang.String value) {
    this.bsb = value;
  }

  /**
   * Gets the value of the 'fi_code' field.
   * @return The value of the 'fi_code' field.
   */
  public java.lang.String getFiCode() {
    return fi_code;
  }


  /**
   * Sets the value of the 'fi_code' field.
   * @param value the value to set.
   */
  public void setFiCode(java.lang.String value) {
    this.fi_code = value;
  }

  /**
   * Gets the value of the 'financial_institution' field.
   * @return The value of the 'financial_institution' field.
   */
  public java.lang.String getFinancialInstitution() {
    return financial_institution;
  }


  /**
   * Sets the value of the 'financial_institution' field.
   * @param value the value to set.
   */
  public void setFinancialInstitution(java.lang.String value) {
    this.financial_institution = value;
  }

  /**
   * Gets the value of the 'bsb_address' field.
   * @return The value of the 'bsb_address' field.
   */
  public java.lang.String getBsbAddress() {
    return bsb_address;
  }


  /**
   * Sets the value of the 'bsb_address' field.
   * @param value the value to set.
   */
  public void setBsbAddress(java.lang.String value) {
    this.bsb_address = value;
  }

  /**
   * Gets the value of the 'suburb' field.
   * @return The value of the 'suburb' field.
   */
  public java.lang.String getSuburb() {
    return suburb;
  }


  /**
   * Sets the value of the 'suburb' field.
   * @param value the value to set.
   */
  public void setSuburb(java.lang.String value) {
    this.suburb = value;
  }

  /**
   * Gets the value of the 'address_state' field.
   * @return The value of the 'address_state' field.
   */
  public java.lang.String getAddressState() {
    return address_state;
  }


  /**
   * Sets the value of the 'address_state' field.
   * @param value the value to set.
   */
  public void setAddressState(java.lang.String value) {
    this.address_state = value;
  }

  /**
   * Gets the value of the 'post_code' field.
   * @return The value of the 'post_code' field.
   */
  public java.lang.String getPostCode() {
    return post_code;
  }


  /**
   * Sets the value of the 'post_code' field.
   * @param value the value to set.
   */
  public void setPostCode(java.lang.String value) {
    this.post_code = value;
  }

  /**
   * Gets the value of the 'payment_systems' field.
   * @return The value of the 'payment_systems' field.
   */
  public java.lang.String getPaymentSystems() {
    return payment_systems;
  }


  /**
   * Sets the value of the 'payment_systems' field.
   * @param value the value to set.
   */
  public void setPaymentSystems(java.lang.String value) {
    this.payment_systems = value;
  }

  /**
   * Creates a new Value RecordBuilder.
   * @return A new Value RecordBuilder
   */
  public static postgres.public$.bsb.Value.Builder newBuilder() {
    return new postgres.public$.bsb.Value.Builder();
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Value RecordBuilder
   */
  public static postgres.public$.bsb.Value.Builder newBuilder(postgres.public$.bsb.Value.Builder other) {
    if (other == null) {
      return new postgres.public$.bsb.Value.Builder();
    } else {
      return new postgres.public$.bsb.Value.Builder(other);
    }
  }

  /**
   * Creates a new Value RecordBuilder by copying an existing Value instance.
   * @param other The existing instance to copy.
   * @return A new Value RecordBuilder
   */
  public static postgres.public$.bsb.Value.Builder newBuilder(postgres.public$.bsb.Value other) {
    if (other == null) {
      return new postgres.public$.bsb.Value.Builder();
    } else {
      return new postgres.public$.bsb.Value.Builder(other);
    }
  }

  /**
   * RecordBuilder for Value instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Value>
    implements org.apache.avro.data.RecordBuilder<Value> {

    private java.lang.String bsb;
    private java.lang.String fi_code;
    private java.lang.String financial_institution;
    private java.lang.String bsb_address;
    private java.lang.String suburb;
    private java.lang.String address_state;
    private java.lang.String post_code;
    private java.lang.String payment_systems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(postgres.public$.bsb.Value.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bsb)) {
        this.bsb = data().deepCopy(fields()[0].schema(), other.bsb);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fi_code)) {
        this.fi_code = data().deepCopy(fields()[1].schema(), other.fi_code);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.financial_institution)) {
        this.financial_institution = data().deepCopy(fields()[2].schema(), other.financial_institution);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bsb_address)) {
        this.bsb_address = data().deepCopy(fields()[3].schema(), other.bsb_address);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.suburb)) {
        this.suburb = data().deepCopy(fields()[4].schema(), other.suburb);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.address_state)) {
        this.address_state = data().deepCopy(fields()[5].schema(), other.address_state);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.post_code)) {
        this.post_code = data().deepCopy(fields()[6].schema(), other.post_code);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.payment_systems)) {
        this.payment_systems = data().deepCopy(fields()[7].schema(), other.payment_systems);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Value instance
     * @param other The existing instance to copy.
     */
    private Builder(postgres.public$.bsb.Value other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bsb)) {
        this.bsb = data().deepCopy(fields()[0].schema(), other.bsb);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fi_code)) {
        this.fi_code = data().deepCopy(fields()[1].schema(), other.fi_code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.financial_institution)) {
        this.financial_institution = data().deepCopy(fields()[2].schema(), other.financial_institution);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bsb_address)) {
        this.bsb_address = data().deepCopy(fields()[3].schema(), other.bsb_address);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.suburb)) {
        this.suburb = data().deepCopy(fields()[4].schema(), other.suburb);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.address_state)) {
        this.address_state = data().deepCopy(fields()[5].schema(), other.address_state);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.post_code)) {
        this.post_code = data().deepCopy(fields()[6].schema(), other.post_code);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.payment_systems)) {
        this.payment_systems = data().deepCopy(fields()[7].schema(), other.payment_systems);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'bsb' field.
      * @return The value.
      */
    public java.lang.String getBsb() {
      return bsb;
    }


    /**
      * Sets the value of the 'bsb' field.
      * @param value The value of 'bsb'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setBsb(java.lang.String value) {
      validate(fields()[0], value);
      this.bsb = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bsb' field has been set.
      * @return True if the 'bsb' field has been set, false otherwise.
      */
    public boolean hasBsb() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bsb' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearBsb() {
      bsb = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fi_code' field.
      * @return The value.
      */
    public java.lang.String getFiCode() {
      return fi_code;
    }


    /**
      * Sets the value of the 'fi_code' field.
      * @param value The value of 'fi_code'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setFiCode(java.lang.String value) {
      validate(fields()[1], value);
      this.fi_code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fi_code' field has been set.
      * @return True if the 'fi_code' field has been set, false otherwise.
      */
    public boolean hasFiCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fi_code' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearFiCode() {
      fi_code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'financial_institution' field.
      * @return The value.
      */
    public java.lang.String getFinancialInstitution() {
      return financial_institution;
    }


    /**
      * Sets the value of the 'financial_institution' field.
      * @param value The value of 'financial_institution'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setFinancialInstitution(java.lang.String value) {
      validate(fields()[2], value);
      this.financial_institution = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'financial_institution' field has been set.
      * @return True if the 'financial_institution' field has been set, false otherwise.
      */
    public boolean hasFinancialInstitution() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'financial_institution' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearFinancialInstitution() {
      financial_institution = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bsb_address' field.
      * @return The value.
      */
    public java.lang.String getBsbAddress() {
      return bsb_address;
    }


    /**
      * Sets the value of the 'bsb_address' field.
      * @param value The value of 'bsb_address'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setBsbAddress(java.lang.String value) {
      validate(fields()[3], value);
      this.bsb_address = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bsb_address' field has been set.
      * @return True if the 'bsb_address' field has been set, false otherwise.
      */
    public boolean hasBsbAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bsb_address' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearBsbAddress() {
      bsb_address = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'suburb' field.
      * @return The value.
      */
    public java.lang.String getSuburb() {
      return suburb;
    }


    /**
      * Sets the value of the 'suburb' field.
      * @param value The value of 'suburb'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setSuburb(java.lang.String value) {
      validate(fields()[4], value);
      this.suburb = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'suburb' field has been set.
      * @return True if the 'suburb' field has been set, false otherwise.
      */
    public boolean hasSuburb() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'suburb' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearSuburb() {
      suburb = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'address_state' field.
      * @return The value.
      */
    public java.lang.String getAddressState() {
      return address_state;
    }


    /**
      * Sets the value of the 'address_state' field.
      * @param value The value of 'address_state'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setAddressState(java.lang.String value) {
      validate(fields()[5], value);
      this.address_state = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'address_state' field has been set.
      * @return True if the 'address_state' field has been set, false otherwise.
      */
    public boolean hasAddressState() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'address_state' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearAddressState() {
      address_state = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'post_code' field.
      * @return The value.
      */
    public java.lang.String getPostCode() {
      return post_code;
    }


    /**
      * Sets the value of the 'post_code' field.
      * @param value The value of 'post_code'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setPostCode(java.lang.String value) {
      validate(fields()[6], value);
      this.post_code = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'post_code' field has been set.
      * @return True if the 'post_code' field has been set, false otherwise.
      */
    public boolean hasPostCode() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'post_code' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearPostCode() {
      post_code = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_systems' field.
      * @return The value.
      */
    public java.lang.String getPaymentSystems() {
      return payment_systems;
    }


    /**
      * Sets the value of the 'payment_systems' field.
      * @param value The value of 'payment_systems'.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder setPaymentSystems(java.lang.String value) {
      validate(fields()[7], value);
      this.payment_systems = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_systems' field has been set.
      * @return True if the 'payment_systems' field has been set, false otherwise.
      */
    public boolean hasPaymentSystems() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'payment_systems' field.
      * @return This builder.
      */
    public postgres.public$.bsb.Value.Builder clearPaymentSystems() {
      payment_systems = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Value build() {
      try {
        Value record = new Value();
        record.bsb = fieldSetFlags()[0] ? this.bsb : (java.lang.String) defaultValue(fields()[0]);
        record.fi_code = fieldSetFlags()[1] ? this.fi_code : (java.lang.String) defaultValue(fields()[1]);
        record.financial_institution = fieldSetFlags()[2] ? this.financial_institution : (java.lang.String) defaultValue(fields()[2]);
        record.bsb_address = fieldSetFlags()[3] ? this.bsb_address : (java.lang.String) defaultValue(fields()[3]);
        record.suburb = fieldSetFlags()[4] ? this.suburb : (java.lang.String) defaultValue(fields()[4]);
        record.address_state = fieldSetFlags()[5] ? this.address_state : (java.lang.String) defaultValue(fields()[5]);
        record.post_code = fieldSetFlags()[6] ? this.post_code : (java.lang.String) defaultValue(fields()[6]);
        record.payment_systems = fieldSetFlags()[7] ? this.payment_systems : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Value>
    WRITER$ = (org.apache.avro.io.DatumWriter<Value>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Value>
    READER$ = (org.apache.avro.io.DatumReader<Value>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bsb);

    if (this.fi_code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.fi_code);
    }

    if (this.financial_institution == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.financial_institution);
    }

    if (this.bsb_address == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bsb_address);
    }

    if (this.suburb == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.suburb);
    }

    if (this.address_state == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.address_state);
    }

    if (this.post_code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.post_code);
    }

    if (this.payment_systems == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.payment_systems);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bsb = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.fi_code = null;
      } else {
        this.fi_code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.financial_institution = null;
      } else {
        this.financial_institution = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bsb_address = null;
      } else {
        this.bsb_address = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.suburb = null;
      } else {
        this.suburb = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.address_state = null;
      } else {
        this.address_state = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.post_code = null;
      } else {
        this.post_code = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payment_systems = null;
      } else {
        this.payment_systems = in.readString();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bsb = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fi_code = null;
          } else {
            this.fi_code = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.financial_institution = null;
          } else {
            this.financial_institution = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bsb_address = null;
          } else {
            this.bsb_address = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.suburb = null;
          } else {
            this.suburb = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.address_state = null;
          } else {
            this.address_state = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.post_code = null;
          } else {
            this.post_code = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payment_systems = null;
          } else {
            this.payment_systems = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










